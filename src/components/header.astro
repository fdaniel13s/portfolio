---
//import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Acerca de mí",
    label: "Acerca de mí",
    url: "/portfolio/#aboutme",
  },
  {
    title: "Habilidades",
    label: "habilidades",
    url: "/portfolio/#skills",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/portfolio/#projects",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "mailto:ferndani2718@gmail.com",
  },
  {
    title: "CV",
    label: "cv",
    url: "https://drive.google.com/file/d/1zpLKsT-llOvlMkJbGSawzjoeXDz0qFOf/view?usp=sharing",
  }
]
---
<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
<header class="fixed top-0 z-10 w-full shadow-sm flex justify-center">

  <nav class="inline-flex px-3 py-1 my-3 text-sm font-extrabold rounded-full bg-gray-200 dark:bg-neutral-900 items-center">
    {
      navItems.map((link) => (
          <a
              class="relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
              aria-label={link.label}
              href={link.url} target={link.label === "cv" ? "_blank" : "_self"}
          >
            {link.title}
          </a>
      ))
    }
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500")
            } else {
              item.classList.remove("text-yellow-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>